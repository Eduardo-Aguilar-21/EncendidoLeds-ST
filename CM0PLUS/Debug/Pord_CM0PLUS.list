
Pord_CM0PLUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000860  080200c0  080200c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08020920  08020920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080209a0  080209a0  0001800c  2**0
                  CONTENTS
  4 .ARM          00000000  080209a0  080209a0  0001800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080209a0  080209a0  0001800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080209a0  080209a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080209a4  080209a4  000109a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20008000  080209a8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000800c  080209b4  0001800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008030  080209b4  00018030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001800c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00018034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c1a  00000000  00000000  00018077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ebb  00000000  00000000  0001bc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000600  00000000  00000000  0001cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000462  00000000  00000000  0001d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019099  00000000  00000000  0001d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005cde  00000000  00000000  0003664b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eaf1  00000000  00000000  0003c329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013f8  00000000  00000000  000dae1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000dc214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080200c0 <__do_global_dtors_aux>:
 80200c0:	b510      	push	{r4, lr}
 80200c2:	4c06      	ldr	r4, [pc, #24]	; (80200dc <__do_global_dtors_aux+0x1c>)
 80200c4:	7823      	ldrb	r3, [r4, #0]
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d107      	bne.n	80200da <__do_global_dtors_aux+0x1a>
 80200ca:	4b05      	ldr	r3, [pc, #20]	; (80200e0 <__do_global_dtors_aux+0x20>)
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d002      	beq.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d0:	4804      	ldr	r0, [pc, #16]	; (80200e4 <__do_global_dtors_aux+0x24>)
 80200d2:	e000      	b.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d4:	bf00      	nop
 80200d6:	2301      	movs	r3, #1
 80200d8:	7023      	strb	r3, [r4, #0]
 80200da:	bd10      	pop	{r4, pc}
 80200dc:	2000800c 	.word	0x2000800c
 80200e0:	00000000 	.word	0x00000000
 80200e4:	08020908 	.word	0x08020908

080200e8 <frame_dummy>:
 80200e8:	4b04      	ldr	r3, [pc, #16]	; (80200fc <frame_dummy+0x14>)
 80200ea:	b510      	push	{r4, lr}
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d003      	beq.n	80200f8 <frame_dummy+0x10>
 80200f0:	4903      	ldr	r1, [pc, #12]	; (8020100 <frame_dummy+0x18>)
 80200f2:	4804      	ldr	r0, [pc, #16]	; (8020104 <frame_dummy+0x1c>)
 80200f4:	e000      	b.n	80200f8 <frame_dummy+0x10>
 80200f6:	bf00      	nop
 80200f8:	bd10      	pop	{r4, pc}
 80200fa:	46c0      	nop			; (mov r8, r8)
 80200fc:	00000000 	.word	0x00000000
 8020100:	20008010 	.word	0x20008010
 8020104:	08020908 	.word	0x08020908

08020108 <__udivsi3>:
 8020108:	2200      	movs	r2, #0
 802010a:	0843      	lsrs	r3, r0, #1
 802010c:	428b      	cmp	r3, r1
 802010e:	d374      	bcc.n	80201fa <__udivsi3+0xf2>
 8020110:	0903      	lsrs	r3, r0, #4
 8020112:	428b      	cmp	r3, r1
 8020114:	d35f      	bcc.n	80201d6 <__udivsi3+0xce>
 8020116:	0a03      	lsrs	r3, r0, #8
 8020118:	428b      	cmp	r3, r1
 802011a:	d344      	bcc.n	80201a6 <__udivsi3+0x9e>
 802011c:	0b03      	lsrs	r3, r0, #12
 802011e:	428b      	cmp	r3, r1
 8020120:	d328      	bcc.n	8020174 <__udivsi3+0x6c>
 8020122:	0c03      	lsrs	r3, r0, #16
 8020124:	428b      	cmp	r3, r1
 8020126:	d30d      	bcc.n	8020144 <__udivsi3+0x3c>
 8020128:	22ff      	movs	r2, #255	; 0xff
 802012a:	0209      	lsls	r1, r1, #8
 802012c:	ba12      	rev	r2, r2
 802012e:	0c03      	lsrs	r3, r0, #16
 8020130:	428b      	cmp	r3, r1
 8020132:	d302      	bcc.n	802013a <__udivsi3+0x32>
 8020134:	1212      	asrs	r2, r2, #8
 8020136:	0209      	lsls	r1, r1, #8
 8020138:	d065      	beq.n	8020206 <__udivsi3+0xfe>
 802013a:	0b03      	lsrs	r3, r0, #12
 802013c:	428b      	cmp	r3, r1
 802013e:	d319      	bcc.n	8020174 <__udivsi3+0x6c>
 8020140:	e000      	b.n	8020144 <__udivsi3+0x3c>
 8020142:	0a09      	lsrs	r1, r1, #8
 8020144:	0bc3      	lsrs	r3, r0, #15
 8020146:	428b      	cmp	r3, r1
 8020148:	d301      	bcc.n	802014e <__udivsi3+0x46>
 802014a:	03cb      	lsls	r3, r1, #15
 802014c:	1ac0      	subs	r0, r0, r3
 802014e:	4152      	adcs	r2, r2
 8020150:	0b83      	lsrs	r3, r0, #14
 8020152:	428b      	cmp	r3, r1
 8020154:	d301      	bcc.n	802015a <__udivsi3+0x52>
 8020156:	038b      	lsls	r3, r1, #14
 8020158:	1ac0      	subs	r0, r0, r3
 802015a:	4152      	adcs	r2, r2
 802015c:	0b43      	lsrs	r3, r0, #13
 802015e:	428b      	cmp	r3, r1
 8020160:	d301      	bcc.n	8020166 <__udivsi3+0x5e>
 8020162:	034b      	lsls	r3, r1, #13
 8020164:	1ac0      	subs	r0, r0, r3
 8020166:	4152      	adcs	r2, r2
 8020168:	0b03      	lsrs	r3, r0, #12
 802016a:	428b      	cmp	r3, r1
 802016c:	d301      	bcc.n	8020172 <__udivsi3+0x6a>
 802016e:	030b      	lsls	r3, r1, #12
 8020170:	1ac0      	subs	r0, r0, r3
 8020172:	4152      	adcs	r2, r2
 8020174:	0ac3      	lsrs	r3, r0, #11
 8020176:	428b      	cmp	r3, r1
 8020178:	d301      	bcc.n	802017e <__udivsi3+0x76>
 802017a:	02cb      	lsls	r3, r1, #11
 802017c:	1ac0      	subs	r0, r0, r3
 802017e:	4152      	adcs	r2, r2
 8020180:	0a83      	lsrs	r3, r0, #10
 8020182:	428b      	cmp	r3, r1
 8020184:	d301      	bcc.n	802018a <__udivsi3+0x82>
 8020186:	028b      	lsls	r3, r1, #10
 8020188:	1ac0      	subs	r0, r0, r3
 802018a:	4152      	adcs	r2, r2
 802018c:	0a43      	lsrs	r3, r0, #9
 802018e:	428b      	cmp	r3, r1
 8020190:	d301      	bcc.n	8020196 <__udivsi3+0x8e>
 8020192:	024b      	lsls	r3, r1, #9
 8020194:	1ac0      	subs	r0, r0, r3
 8020196:	4152      	adcs	r2, r2
 8020198:	0a03      	lsrs	r3, r0, #8
 802019a:	428b      	cmp	r3, r1
 802019c:	d301      	bcc.n	80201a2 <__udivsi3+0x9a>
 802019e:	020b      	lsls	r3, r1, #8
 80201a0:	1ac0      	subs	r0, r0, r3
 80201a2:	4152      	adcs	r2, r2
 80201a4:	d2cd      	bcs.n	8020142 <__udivsi3+0x3a>
 80201a6:	09c3      	lsrs	r3, r0, #7
 80201a8:	428b      	cmp	r3, r1
 80201aa:	d301      	bcc.n	80201b0 <__udivsi3+0xa8>
 80201ac:	01cb      	lsls	r3, r1, #7
 80201ae:	1ac0      	subs	r0, r0, r3
 80201b0:	4152      	adcs	r2, r2
 80201b2:	0983      	lsrs	r3, r0, #6
 80201b4:	428b      	cmp	r3, r1
 80201b6:	d301      	bcc.n	80201bc <__udivsi3+0xb4>
 80201b8:	018b      	lsls	r3, r1, #6
 80201ba:	1ac0      	subs	r0, r0, r3
 80201bc:	4152      	adcs	r2, r2
 80201be:	0943      	lsrs	r3, r0, #5
 80201c0:	428b      	cmp	r3, r1
 80201c2:	d301      	bcc.n	80201c8 <__udivsi3+0xc0>
 80201c4:	014b      	lsls	r3, r1, #5
 80201c6:	1ac0      	subs	r0, r0, r3
 80201c8:	4152      	adcs	r2, r2
 80201ca:	0903      	lsrs	r3, r0, #4
 80201cc:	428b      	cmp	r3, r1
 80201ce:	d301      	bcc.n	80201d4 <__udivsi3+0xcc>
 80201d0:	010b      	lsls	r3, r1, #4
 80201d2:	1ac0      	subs	r0, r0, r3
 80201d4:	4152      	adcs	r2, r2
 80201d6:	08c3      	lsrs	r3, r0, #3
 80201d8:	428b      	cmp	r3, r1
 80201da:	d301      	bcc.n	80201e0 <__udivsi3+0xd8>
 80201dc:	00cb      	lsls	r3, r1, #3
 80201de:	1ac0      	subs	r0, r0, r3
 80201e0:	4152      	adcs	r2, r2
 80201e2:	0883      	lsrs	r3, r0, #2
 80201e4:	428b      	cmp	r3, r1
 80201e6:	d301      	bcc.n	80201ec <__udivsi3+0xe4>
 80201e8:	008b      	lsls	r3, r1, #2
 80201ea:	1ac0      	subs	r0, r0, r3
 80201ec:	4152      	adcs	r2, r2
 80201ee:	0843      	lsrs	r3, r0, #1
 80201f0:	428b      	cmp	r3, r1
 80201f2:	d301      	bcc.n	80201f8 <__udivsi3+0xf0>
 80201f4:	004b      	lsls	r3, r1, #1
 80201f6:	1ac0      	subs	r0, r0, r3
 80201f8:	4152      	adcs	r2, r2
 80201fa:	1a41      	subs	r1, r0, r1
 80201fc:	d200      	bcs.n	8020200 <__udivsi3+0xf8>
 80201fe:	4601      	mov	r1, r0
 8020200:	4152      	adcs	r2, r2
 8020202:	4610      	mov	r0, r2
 8020204:	4770      	bx	lr
 8020206:	e7ff      	b.n	8020208 <__udivsi3+0x100>
 8020208:	b501      	push	{r0, lr}
 802020a:	2000      	movs	r0, #0
 802020c:	f000 f806 	bl	802021c <__aeabi_idiv0>
 8020210:	bd02      	pop	{r1, pc}
 8020212:	46c0      	nop			; (mov r8, r8)

08020214 <__aeabi_uidivmod>:
 8020214:	2900      	cmp	r1, #0
 8020216:	d0f7      	beq.n	8020208 <__udivsi3+0x100>
 8020218:	e776      	b.n	8020108 <__udivsi3>
 802021a:	4770      	bx	lr

0802021c <__aeabi_idiv0>:
 802021c:	4770      	bx	lr
 802021e:	46c0      	nop			; (mov r8, r8)

08020220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020220:	b580      	push	{r7, lr}
 8020222:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8020224:	46c0      	nop			; (mov r8, r8)
 8020226:	46bd      	mov	sp, r7
 8020228:	bd80      	pop	{r7, pc}
	...

0802022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802022c:	b580      	push	{r7, lr}
 802022e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020230:	f000 f87a 	bl	8020328 <HAL_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //PLIUS
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);   // Enciende el LED en el pin GPIO_PIN_9
 8020234:	2380      	movs	r3, #128	; 0x80
 8020236:	009b      	lsls	r3, r3, #2
 8020238:	4815      	ldr	r0, [pc, #84]	; (8020290 <main+0x64>)
 802023a:	2201      	movs	r2, #1
 802023c:	0019      	movs	r1, r3
 802023e:	f000 f9ea 	bl	8020616 <HAL_GPIO_WritePin>
	    HAL_Delay(3000);                                      // Espera 1000 milisegundos (1 segundo)
 8020242:	4b14      	ldr	r3, [pc, #80]	; (8020294 <main+0x68>)
 8020244:	0018      	movs	r0, r3
 8020246:	f000 f8f1 	bl	802042c <HAL_Delay>

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);  // Enciende el LED en el pin GPIO_PIN_11
 802024a:	2380      	movs	r3, #128	; 0x80
 802024c:	011b      	lsls	r3, r3, #4
 802024e:	4810      	ldr	r0, [pc, #64]	; (8020290 <main+0x64>)
 8020250:	2201      	movs	r2, #1
 8020252:	0019      	movs	r1, r3
 8020254:	f000 f9df 	bl	8020616 <HAL_GPIO_WritePin>
	    HAL_Delay(3000);                                      // Espera 1000 milisegundos (1 segundo)
 8020258:	4b0e      	ldr	r3, [pc, #56]	; (8020294 <main+0x68>)
 802025a:	0018      	movs	r0, r3
 802025c:	f000 f8e6 	bl	802042c <HAL_Delay>

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);  // Enciende el LED en el pin GPIO_PIN_15
 8020260:	2380      	movs	r3, #128	; 0x80
 8020262:	021b      	lsls	r3, r3, #8
 8020264:	480a      	ldr	r0, [pc, #40]	; (8020290 <main+0x64>)
 8020266:	2201      	movs	r2, #1
 8020268:	0019      	movs	r1, r3
 802026a:	f000 f9d4 	bl	8020616 <HAL_GPIO_WritePin>
	    HAL_Delay(3000);
 802026e:	4b09      	ldr	r3, [pc, #36]	; (8020294 <main+0x68>)
 8020270:	0018      	movs	r0, r3
 8020272:	f000 f8db 	bl	802042c <HAL_Delay>
	    State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8020276:	2380      	movs	r3, #128	; 0x80
 8020278:	009b      	lsls	r3, r3, #2
 802027a:	4a05      	ldr	r2, [pc, #20]	; (8020290 <main+0x64>)
 802027c:	0019      	movs	r1, r3
 802027e:	0010      	movs	r0, r2
 8020280:	f000 f9ac 	bl	80205dc <HAL_GPIO_ReadPin>
 8020284:	0003      	movs	r3, r0
 8020286:	001a      	movs	r2, r3
 8020288:	4b03      	ldr	r3, [pc, #12]	; (8020298 <main+0x6c>)
 802028a:	601a      	str	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);   // Enciende el LED en el pin GPIO_PIN_9
 802028c:	e7d2      	b.n	8020234 <main+0x8>
 802028e:	46c0      	nop			; (mov r8, r8)
 8020290:	48000400 	.word	0x48000400
 8020294:	00000bb8 	.word	0x00000bb8
 8020298:	20008028 	.word	0x20008028

0802029c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802029c:	b580      	push	{r7, lr}
 802029e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80202a0:	46c0      	nop			; (mov r8, r8)
 80202a2:	46bd      	mov	sp, r7
 80202a4:	bd80      	pop	{r7, pc}

080202a6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80202a6:	b580      	push	{r7, lr}
 80202a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80202aa:	e7fe      	b.n	80202aa <NMI_Handler+0x4>

080202ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80202ac:	b580      	push	{r7, lr}
 80202ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80202b0:	e7fe      	b.n	80202b0 <HardFault_Handler+0x4>

080202b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80202b2:	b580      	push	{r7, lr}
 80202b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80202b6:	46c0      	nop			; (mov r8, r8)
 80202b8:	46bd      	mov	sp, r7
 80202ba:	bd80      	pop	{r7, pc}

080202bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80202bc:	b580      	push	{r7, lr}
 80202be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80202c0:	46c0      	nop			; (mov r8, r8)
 80202c2:	46bd      	mov	sp, r7
 80202c4:	bd80      	pop	{r7, pc}

080202c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80202c6:	b580      	push	{r7, lr}
 80202c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80202ca:	f000 f893 	bl	80203f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80202ce:	46c0      	nop			; (mov r8, r8)
 80202d0:	46bd      	mov	sp, r7
 80202d2:	bd80      	pop	{r7, pc}

080202d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80202d4:	480d      	ldr	r0, [pc, #52]	; (802030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80202d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80202d8:	f7ff ffa2 	bl	8020220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80202dc:	480c      	ldr	r0, [pc, #48]	; (8020310 <LoopForever+0x6>)
  ldr r1, =_edata
 80202de:	490d      	ldr	r1, [pc, #52]	; (8020314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80202e0:	4a0d      	ldr	r2, [pc, #52]	; (8020318 <LoopForever+0xe>)
  movs r3, #0
 80202e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80202e4:	e002      	b.n	80202ec <LoopCopyDataInit>

080202e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80202e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80202e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80202ea:	3304      	adds	r3, #4

080202ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80202ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80202ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80202f0:	d3f9      	bcc.n	80202e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80202f2:	4a0a      	ldr	r2, [pc, #40]	; (802031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80202f4:	4c0a      	ldr	r4, [pc, #40]	; (8020320 <LoopForever+0x16>)
  movs r3, #0
 80202f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80202f8:	e001      	b.n	80202fe <LoopFillZerobss>

080202fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80202fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80202fc:	3204      	adds	r2, #4

080202fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80202fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020300:	d3fb      	bcc.n	80202fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8020302:	f000 fadd 	bl	80208c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8020306:	f7ff ff91 	bl	802022c <main>

0802030a <LoopForever>:

LoopForever:
    b LoopForever
 802030a:	e7fe      	b.n	802030a <LoopForever>
  ldr   r0, =_estack
 802030c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8020310:	20008000 	.word	0x20008000
  ldr r1, =_edata
 8020314:	2000800c 	.word	0x2000800c
  ldr r2, =_sidata
 8020318:	080209a8 	.word	0x080209a8
  ldr r2, =_sbss
 802031c:	2000800c 	.word	0x2000800c
  ldr r4, =_ebss
 8020320:	20008030 	.word	0x20008030

08020324 <ADC_COMP_DAC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8020324:	e7fe      	b.n	8020324 <ADC_COMP_DAC_IRQHandler>
	...

08020328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020328:	b580      	push	{r7, lr}
 802032a:	b082      	sub	sp, #8
 802032c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 802032e:	1dfb      	adds	r3, r7, #7
 8020330:	2200      	movs	r2, #0
 8020332:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
#endif

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
 8020334:	f000 faac 	bl	8020890 <HAL_RCC_GetHCLK2Freq>
 8020338:	0002      	movs	r2, r0
 802033a:	4b09      	ldr	r3, [pc, #36]	; (8020360 <HAL_Init+0x38>)
 802033c:	601a      	str	r2, [r3, #0]
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802033e:	2000      	movs	r0, #0
 8020340:	f000 f810 	bl	8020364 <HAL_InitTick>
 8020344:	1e03      	subs	r3, r0, #0
 8020346:	d003      	beq.n	8020350 <HAL_Init+0x28>
  {
    status = HAL_ERROR;
 8020348:	1dfb      	adds	r3, r7, #7
 802034a:	2201      	movs	r2, #1
 802034c:	701a      	strb	r2, [r3, #0]
 802034e:	e001      	b.n	8020354 <HAL_Init+0x2c>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020350:	f7ff ffa4 	bl	802029c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020354:	1dfb      	adds	r3, r7, #7
 8020356:	781b      	ldrb	r3, [r3, #0]
}
 8020358:	0018      	movs	r0, r3
 802035a:	46bd      	mov	sp, r7
 802035c:	b002      	add	sp, #8
 802035e:	bd80      	pop	{r7, pc}
 8020360:	20008000 	.word	0x20008000

08020364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020364:	b590      	push	{r4, r7, lr}
 8020366:	b085      	sub	sp, #20
 8020368:	af00      	add	r7, sp, #0
 802036a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 802036c:	230f      	movs	r3, #15
 802036e:	18fb      	adds	r3, r7, r3
 8020370:	2200      	movs	r2, #0
 8020372:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020374:	4b1d      	ldr	r3, [pc, #116]	; (80203ec <HAL_InitTick+0x88>)
 8020376:	781b      	ldrb	r3, [r3, #0]
 8020378:	2b00      	cmp	r3, #0
 802037a:	d02c      	beq.n	80203d6 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 802037c:	f000 fa88 	bl	8020890 <HAL_RCC_GetHCLK2Freq>
 8020380:	0004      	movs	r4, r0
 8020382:	4b1a      	ldr	r3, [pc, #104]	; (80203ec <HAL_InitTick+0x88>)
 8020384:	781b      	ldrb	r3, [r3, #0]
 8020386:	0019      	movs	r1, r3
 8020388:	23fa      	movs	r3, #250	; 0xfa
 802038a:	0098      	lsls	r0, r3, #2
 802038c:	f7ff febc 	bl	8020108 <__udivsi3>
 8020390:	0003      	movs	r3, r0
 8020392:	0019      	movs	r1, r3
 8020394:	0020      	movs	r0, r4
 8020396:	f7ff feb7 	bl	8020108 <__udivsi3>
 802039a:	0003      	movs	r3, r0
 802039c:	0018      	movs	r0, r3
 802039e:	f000 f910 	bl	80205c2 <HAL_SYSTICK_Config>
 80203a2:	1e03      	subs	r3, r0, #0
 80203a4:	d112      	bne.n	80203cc <HAL_InitTick+0x68>
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	2b03      	cmp	r3, #3
 80203aa:	d80a      	bhi.n	80203c2 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80203ac:	6879      	ldr	r1, [r7, #4]
 80203ae:	2301      	movs	r3, #1
 80203b0:	425b      	negs	r3, r3
 80203b2:	2200      	movs	r2, #0
 80203b4:	0018      	movs	r0, r3
 80203b6:	f000 f8ef 	bl	8020598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80203ba:	4b0d      	ldr	r3, [pc, #52]	; (80203f0 <HAL_InitTick+0x8c>)
 80203bc:	687a      	ldr	r2, [r7, #4]
 80203be:	601a      	str	r2, [r3, #0]
 80203c0:	e00d      	b.n	80203de <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
 80203c2:	230f      	movs	r3, #15
 80203c4:	18fb      	adds	r3, r7, r3
 80203c6:	2201      	movs	r2, #1
 80203c8:	701a      	strb	r2, [r3, #0]
 80203ca:	e008      	b.n	80203de <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80203cc:	230f      	movs	r3, #15
 80203ce:	18fb      	adds	r3, r7, r3
 80203d0:	2201      	movs	r2, #1
 80203d2:	701a      	strb	r2, [r3, #0]
 80203d4:	e003      	b.n	80203de <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80203d6:	230f      	movs	r3, #15
 80203d8:	18fb      	adds	r3, r7, r3
 80203da:	2201      	movs	r2, #1
 80203dc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80203de:	230f      	movs	r3, #15
 80203e0:	18fb      	adds	r3, r7, r3
 80203e2:	781b      	ldrb	r3, [r3, #0]
}
 80203e4:	0018      	movs	r0, r3
 80203e6:	46bd      	mov	sp, r7
 80203e8:	b005      	add	sp, #20
 80203ea:	bd90      	pop	{r4, r7, pc}
 80203ec:	20008008 	.word	0x20008008
 80203f0:	20008004 	.word	0x20008004

080203f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80203f4:	b580      	push	{r7, lr}
 80203f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80203f8:	4b05      	ldr	r3, [pc, #20]	; (8020410 <HAL_IncTick+0x1c>)
 80203fa:	781b      	ldrb	r3, [r3, #0]
 80203fc:	001a      	movs	r2, r3
 80203fe:	4b05      	ldr	r3, [pc, #20]	; (8020414 <HAL_IncTick+0x20>)
 8020400:	681b      	ldr	r3, [r3, #0]
 8020402:	18d2      	adds	r2, r2, r3
 8020404:	4b03      	ldr	r3, [pc, #12]	; (8020414 <HAL_IncTick+0x20>)
 8020406:	601a      	str	r2, [r3, #0]
}
 8020408:	46c0      	nop			; (mov r8, r8)
 802040a:	46bd      	mov	sp, r7
 802040c:	bd80      	pop	{r7, pc}
 802040e:	46c0      	nop			; (mov r8, r8)
 8020410:	20008008 	.word	0x20008008
 8020414:	2000802c 	.word	0x2000802c

08020418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020418:	b580      	push	{r7, lr}
 802041a:	af00      	add	r7, sp, #0
  return uwTick;
 802041c:	4b02      	ldr	r3, [pc, #8]	; (8020428 <HAL_GetTick+0x10>)
 802041e:	681b      	ldr	r3, [r3, #0]
}
 8020420:	0018      	movs	r0, r3
 8020422:	46bd      	mov	sp, r7
 8020424:	bd80      	pop	{r7, pc}
 8020426:	46c0      	nop			; (mov r8, r8)
 8020428:	2000802c 	.word	0x2000802c

0802042c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802042c:	b580      	push	{r7, lr}
 802042e:	b084      	sub	sp, #16
 8020430:	af00      	add	r7, sp, #0
 8020432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020434:	f7ff fff0 	bl	8020418 <HAL_GetTick>
 8020438:	0003      	movs	r3, r0
 802043a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020440:	68fb      	ldr	r3, [r7, #12]
 8020442:	3301      	adds	r3, #1
 8020444:	d005      	beq.n	8020452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020446:	4b0a      	ldr	r3, [pc, #40]	; (8020470 <HAL_Delay+0x44>)
 8020448:	781b      	ldrb	r3, [r3, #0]
 802044a:	001a      	movs	r2, r3
 802044c:	68fb      	ldr	r3, [r7, #12]
 802044e:	189b      	adds	r3, r3, r2
 8020450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8020452:	46c0      	nop			; (mov r8, r8)
 8020454:	f7ff ffe0 	bl	8020418 <HAL_GetTick>
 8020458:	0002      	movs	r2, r0
 802045a:	68bb      	ldr	r3, [r7, #8]
 802045c:	1ad3      	subs	r3, r2, r3
 802045e:	68fa      	ldr	r2, [r7, #12]
 8020460:	429a      	cmp	r2, r3
 8020462:	d8f7      	bhi.n	8020454 <HAL_Delay+0x28>
  {
  }
}
 8020464:	46c0      	nop			; (mov r8, r8)
 8020466:	46c0      	nop			; (mov r8, r8)
 8020468:	46bd      	mov	sp, r7
 802046a:	b004      	add	sp, #16
 802046c:	bd80      	pop	{r7, pc}
 802046e:	46c0      	nop			; (mov r8, r8)
 8020470:	20008008 	.word	0x20008008

08020474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020474:	b590      	push	{r4, r7, lr}
 8020476:	b083      	sub	sp, #12
 8020478:	af00      	add	r7, sp, #0
 802047a:	0002      	movs	r2, r0
 802047c:	6039      	str	r1, [r7, #0]
 802047e:	1dfb      	adds	r3, r7, #7
 8020480:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8020482:	1dfb      	adds	r3, r7, #7
 8020484:	781b      	ldrb	r3, [r3, #0]
 8020486:	2b7f      	cmp	r3, #127	; 0x7f
 8020488:	d828      	bhi.n	80204dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802048a:	4a2f      	ldr	r2, [pc, #188]	; (8020548 <__NVIC_SetPriority+0xd4>)
 802048c:	1dfb      	adds	r3, r7, #7
 802048e:	781b      	ldrb	r3, [r3, #0]
 8020490:	b25b      	sxtb	r3, r3
 8020492:	089b      	lsrs	r3, r3, #2
 8020494:	33c0      	adds	r3, #192	; 0xc0
 8020496:	009b      	lsls	r3, r3, #2
 8020498:	589b      	ldr	r3, [r3, r2]
 802049a:	1dfa      	adds	r2, r7, #7
 802049c:	7812      	ldrb	r2, [r2, #0]
 802049e:	0011      	movs	r1, r2
 80204a0:	2203      	movs	r2, #3
 80204a2:	400a      	ands	r2, r1
 80204a4:	00d2      	lsls	r2, r2, #3
 80204a6:	21ff      	movs	r1, #255	; 0xff
 80204a8:	4091      	lsls	r1, r2
 80204aa:	000a      	movs	r2, r1
 80204ac:	43d2      	mvns	r2, r2
 80204ae:	401a      	ands	r2, r3
 80204b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80204b2:	683b      	ldr	r3, [r7, #0]
 80204b4:	019b      	lsls	r3, r3, #6
 80204b6:	22ff      	movs	r2, #255	; 0xff
 80204b8:	401a      	ands	r2, r3
 80204ba:	1dfb      	adds	r3, r7, #7
 80204bc:	781b      	ldrb	r3, [r3, #0]
 80204be:	0018      	movs	r0, r3
 80204c0:	2303      	movs	r3, #3
 80204c2:	4003      	ands	r3, r0
 80204c4:	00db      	lsls	r3, r3, #3
 80204c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80204c8:	481f      	ldr	r0, [pc, #124]	; (8020548 <__NVIC_SetPriority+0xd4>)
 80204ca:	1dfb      	adds	r3, r7, #7
 80204cc:	781b      	ldrb	r3, [r3, #0]
 80204ce:	b25b      	sxtb	r3, r3
 80204d0:	089b      	lsrs	r3, r3, #2
 80204d2:	430a      	orrs	r2, r1
 80204d4:	33c0      	adds	r3, #192	; 0xc0
 80204d6:	009b      	lsls	r3, r3, #2
 80204d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80204da:	e031      	b.n	8020540 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80204dc:	4a1b      	ldr	r2, [pc, #108]	; (802054c <__NVIC_SetPriority+0xd8>)
 80204de:	1dfb      	adds	r3, r7, #7
 80204e0:	781b      	ldrb	r3, [r3, #0]
 80204e2:	0019      	movs	r1, r3
 80204e4:	230f      	movs	r3, #15
 80204e6:	400b      	ands	r3, r1
 80204e8:	3b08      	subs	r3, #8
 80204ea:	089b      	lsrs	r3, r3, #2
 80204ec:	3306      	adds	r3, #6
 80204ee:	009b      	lsls	r3, r3, #2
 80204f0:	18d3      	adds	r3, r2, r3
 80204f2:	3304      	adds	r3, #4
 80204f4:	681b      	ldr	r3, [r3, #0]
 80204f6:	1dfa      	adds	r2, r7, #7
 80204f8:	7812      	ldrb	r2, [r2, #0]
 80204fa:	0011      	movs	r1, r2
 80204fc:	2203      	movs	r2, #3
 80204fe:	400a      	ands	r2, r1
 8020500:	00d2      	lsls	r2, r2, #3
 8020502:	21ff      	movs	r1, #255	; 0xff
 8020504:	4091      	lsls	r1, r2
 8020506:	000a      	movs	r2, r1
 8020508:	43d2      	mvns	r2, r2
 802050a:	401a      	ands	r2, r3
 802050c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802050e:	683b      	ldr	r3, [r7, #0]
 8020510:	019b      	lsls	r3, r3, #6
 8020512:	22ff      	movs	r2, #255	; 0xff
 8020514:	401a      	ands	r2, r3
 8020516:	1dfb      	adds	r3, r7, #7
 8020518:	781b      	ldrb	r3, [r3, #0]
 802051a:	0018      	movs	r0, r3
 802051c:	2303      	movs	r3, #3
 802051e:	4003      	ands	r3, r0
 8020520:	00db      	lsls	r3, r3, #3
 8020522:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020524:	4809      	ldr	r0, [pc, #36]	; (802054c <__NVIC_SetPriority+0xd8>)
 8020526:	1dfb      	adds	r3, r7, #7
 8020528:	781b      	ldrb	r3, [r3, #0]
 802052a:	001c      	movs	r4, r3
 802052c:	230f      	movs	r3, #15
 802052e:	4023      	ands	r3, r4
 8020530:	3b08      	subs	r3, #8
 8020532:	089b      	lsrs	r3, r3, #2
 8020534:	430a      	orrs	r2, r1
 8020536:	3306      	adds	r3, #6
 8020538:	009b      	lsls	r3, r3, #2
 802053a:	18c3      	adds	r3, r0, r3
 802053c:	3304      	adds	r3, #4
 802053e:	601a      	str	r2, [r3, #0]
}
 8020540:	46c0      	nop			; (mov r8, r8)
 8020542:	46bd      	mov	sp, r7
 8020544:	b003      	add	sp, #12
 8020546:	bd90      	pop	{r4, r7, pc}
 8020548:	e000e100 	.word	0xe000e100
 802054c:	e000ed00 	.word	0xe000ed00

08020550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020550:	b580      	push	{r7, lr}
 8020552:	b082      	sub	sp, #8
 8020554:	af00      	add	r7, sp, #0
 8020556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020558:	687b      	ldr	r3, [r7, #4]
 802055a:	1e5a      	subs	r2, r3, #1
 802055c:	2380      	movs	r3, #128	; 0x80
 802055e:	045b      	lsls	r3, r3, #17
 8020560:	429a      	cmp	r2, r3
 8020562:	d301      	bcc.n	8020568 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020564:	2301      	movs	r3, #1
 8020566:	e010      	b.n	802058a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020568:	4b0a      	ldr	r3, [pc, #40]	; (8020594 <SysTick_Config+0x44>)
 802056a:	687a      	ldr	r2, [r7, #4]
 802056c:	3a01      	subs	r2, #1
 802056e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020570:	2301      	movs	r3, #1
 8020572:	425b      	negs	r3, r3
 8020574:	2103      	movs	r1, #3
 8020576:	0018      	movs	r0, r3
 8020578:	f7ff ff7c 	bl	8020474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802057c:	4b05      	ldr	r3, [pc, #20]	; (8020594 <SysTick_Config+0x44>)
 802057e:	2200      	movs	r2, #0
 8020580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020582:	4b04      	ldr	r3, [pc, #16]	; (8020594 <SysTick_Config+0x44>)
 8020584:	2207      	movs	r2, #7
 8020586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020588:	2300      	movs	r3, #0
}
 802058a:	0018      	movs	r0, r3
 802058c:	46bd      	mov	sp, r7
 802058e:	b002      	add	sp, #8
 8020590:	bd80      	pop	{r7, pc}
 8020592:	46c0      	nop			; (mov r8, r8)
 8020594:	e000e010 	.word	0xe000e010

08020598 <HAL_NVIC_SetPriority>:
  *         with stm32wlxx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020598:	b580      	push	{r7, lr}
 802059a:	b084      	sub	sp, #16
 802059c:	af00      	add	r7, sp, #0
 802059e:	60b9      	str	r1, [r7, #8]
 80205a0:	607a      	str	r2, [r7, #4]
 80205a2:	210f      	movs	r1, #15
 80205a4:	187b      	adds	r3, r7, r1
 80205a6:	1c02      	adds	r2, r0, #0
 80205a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80205aa:	68ba      	ldr	r2, [r7, #8]
 80205ac:	187b      	adds	r3, r7, r1
 80205ae:	781b      	ldrb	r3, [r3, #0]
 80205b0:	b25b      	sxtb	r3, r3
 80205b2:	0011      	movs	r1, r2
 80205b4:	0018      	movs	r0, r3
 80205b6:	f7ff ff5d 	bl	8020474 <__NVIC_SetPriority>
}
 80205ba:	46c0      	nop			; (mov r8, r8)
 80205bc:	46bd      	mov	sp, r7
 80205be:	b004      	add	sp, #16
 80205c0:	bd80      	pop	{r7, pc}

080205c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80205c2:	b580      	push	{r7, lr}
 80205c4:	b082      	sub	sp, #8
 80205c6:	af00      	add	r7, sp, #0
 80205c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	0018      	movs	r0, r3
 80205ce:	f7ff ffbf 	bl	8020550 <SysTick_Config>
 80205d2:	0003      	movs	r3, r0
}
 80205d4:	0018      	movs	r0, r3
 80205d6:	46bd      	mov	sp, r7
 80205d8:	b002      	add	sp, #8
 80205da:	bd80      	pop	{r7, pc}

080205dc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80205dc:	b580      	push	{r7, lr}
 80205de:	b084      	sub	sp, #16
 80205e0:	af00      	add	r7, sp, #0
 80205e2:	6078      	str	r0, [r7, #4]
 80205e4:	000a      	movs	r2, r1
 80205e6:	1cbb      	adds	r3, r7, #2
 80205e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	691b      	ldr	r3, [r3, #16]
 80205ee:	1cba      	adds	r2, r7, #2
 80205f0:	8812      	ldrh	r2, [r2, #0]
 80205f2:	4013      	ands	r3, r2
 80205f4:	d004      	beq.n	8020600 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80205f6:	230f      	movs	r3, #15
 80205f8:	18fb      	adds	r3, r7, r3
 80205fa:	2201      	movs	r2, #1
 80205fc:	701a      	strb	r2, [r3, #0]
 80205fe:	e003      	b.n	8020608 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8020600:	230f      	movs	r3, #15
 8020602:	18fb      	adds	r3, r7, r3
 8020604:	2200      	movs	r2, #0
 8020606:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8020608:	230f      	movs	r3, #15
 802060a:	18fb      	adds	r3, r7, r3
 802060c:	781b      	ldrb	r3, [r3, #0]
}
 802060e:	0018      	movs	r0, r3
 8020610:	46bd      	mov	sp, r7
 8020612:	b004      	add	sp, #16
 8020614:	bd80      	pop	{r7, pc}

08020616 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8020616:	b580      	push	{r7, lr}
 8020618:	b082      	sub	sp, #8
 802061a:	af00      	add	r7, sp, #0
 802061c:	6078      	str	r0, [r7, #4]
 802061e:	0008      	movs	r0, r1
 8020620:	0011      	movs	r1, r2
 8020622:	1cbb      	adds	r3, r7, #2
 8020624:	1c02      	adds	r2, r0, #0
 8020626:	801a      	strh	r2, [r3, #0]
 8020628:	1c7b      	adds	r3, r7, #1
 802062a:	1c0a      	adds	r2, r1, #0
 802062c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802062e:	1c7b      	adds	r3, r7, #1
 8020630:	781b      	ldrb	r3, [r3, #0]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d004      	beq.n	8020640 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8020636:	1cbb      	adds	r3, r7, #2
 8020638:	881a      	ldrh	r2, [r3, #0]
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 802063e:	e003      	b.n	8020648 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8020640:	1cbb      	adds	r3, r7, #2
 8020642:	881a      	ldrh	r2, [r3, #0]
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8020648:	46c0      	nop			; (mov r8, r8)
 802064a:	46bd      	mov	sp, r7
 802064c:	b002      	add	sp, #8
 802064e:	bd80      	pop	{r7, pc}

08020650 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8020650:	b580      	push	{r7, lr}
 8020652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8020654:	23b0      	movs	r3, #176	; 0xb0
 8020656:	05db      	lsls	r3, r3, #23
 8020658:	681a      	ldr	r2, [r3, #0]
 802065a:	2380      	movs	r3, #128	; 0x80
 802065c:	035b      	lsls	r3, r3, #13
 802065e:	401a      	ands	r2, r3
 8020660:	2380      	movs	r3, #128	; 0x80
 8020662:	035b      	lsls	r3, r3, #13
 8020664:	429a      	cmp	r2, r3
 8020666:	d101      	bne.n	802066c <LL_RCC_HSE_IsEnabledDiv2+0x1c>
 8020668:	2301      	movs	r3, #1
 802066a:	e000      	b.n	802066e <LL_RCC_HSE_IsEnabledDiv2+0x1e>
 802066c:	2300      	movs	r3, #0
}
 802066e:	0018      	movs	r0, r3
 8020670:	46bd      	mov	sp, r7
 8020672:	bd80      	pop	{r7, pc}

08020674 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8020674:	b580      	push	{r7, lr}
 8020676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8020678:	23b0      	movs	r3, #176	; 0xb0
 802067a:	05db      	lsls	r3, r3, #23
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	2208      	movs	r2, #8
 8020680:	4013      	ands	r3, r2
 8020682:	2b08      	cmp	r3, #8
 8020684:	d101      	bne.n	802068a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8020686:	2301      	movs	r3, #1
 8020688:	e000      	b.n	802068c <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 802068a:	2300      	movs	r3, #0
}
 802068c:	0018      	movs	r0, r3
 802068e:	46bd      	mov	sp, r7
 8020690:	bd80      	pop	{r7, pc}

08020692 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8020692:	b580      	push	{r7, lr}
 8020694:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8020696:	23b0      	movs	r3, #176	; 0xb0
 8020698:	05db      	lsls	r3, r3, #23
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	22f0      	movs	r2, #240	; 0xf0
 802069e:	4013      	ands	r3, r2
}
 80206a0:	0018      	movs	r0, r3
 80206a2:	46bd      	mov	sp, r7
 80206a4:	bd80      	pop	{r7, pc}

080206a6 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80206a6:	b580      	push	{r7, lr}
 80206a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80206aa:	23b0      	movs	r3, #176	; 0xb0
 80206ac:	05db      	lsls	r3, r3, #23
 80206ae:	2294      	movs	r2, #148	; 0x94
 80206b0:	589a      	ldr	r2, [r3, r2]
 80206b2:	23f0      	movs	r3, #240	; 0xf0
 80206b4:	011b      	lsls	r3, r3, #4
 80206b6:	4013      	ands	r3, r2
}
 80206b8:	0018      	movs	r0, r3
 80206ba:	46bd      	mov	sp, r7
 80206bc:	bd80      	pop	{r7, pc}

080206be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80206be:	b580      	push	{r7, lr}
 80206c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80206c2:	23b0      	movs	r3, #176	; 0xb0
 80206c4:	05db      	lsls	r3, r3, #23
 80206c6:	689b      	ldr	r3, [r3, #8]
 80206c8:	220c      	movs	r2, #12
 80206ca:	4013      	ands	r3, r2
}
 80206cc:	0018      	movs	r0, r3
 80206ce:	46bd      	mov	sp, r7
 80206d0:	bd80      	pop	{r7, pc}

080206d2 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80206d2:	b580      	push	{r7, lr}
 80206d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80206d6:	23b0      	movs	r3, #176	; 0xb0
 80206d8:	05da      	lsls	r2, r3, #23
 80206da:	2384      	movs	r3, #132	; 0x84
 80206dc:	005b      	lsls	r3, r3, #1
 80206de:	58d3      	ldr	r3, [r2, r3]
 80206e0:	22f0      	movs	r2, #240	; 0xf0
 80206e2:	4013      	ands	r3, r2
}
 80206e4:	0018      	movs	r0, r3
 80206e6:	46bd      	mov	sp, r7
 80206e8:	bd80      	pop	{r7, pc}

080206ea <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80206ea:	b580      	push	{r7, lr}
 80206ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80206ee:	23b0      	movs	r3, #176	; 0xb0
 80206f0:	05db      	lsls	r3, r3, #23
 80206f2:	68db      	ldr	r3, [r3, #12]
 80206f4:	0a1b      	lsrs	r3, r3, #8
 80206f6:	227f      	movs	r2, #127	; 0x7f
 80206f8:	4013      	ands	r3, r2
}
 80206fa:	0018      	movs	r0, r3
 80206fc:	46bd      	mov	sp, r7
 80206fe:	bd80      	pop	{r7, pc}

08020700 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8020700:	b580      	push	{r7, lr}
 8020702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8020704:	23b0      	movs	r3, #176	; 0xb0
 8020706:	05db      	lsls	r3, r3, #23
 8020708:	68db      	ldr	r3, [r3, #12]
 802070a:	0f5b      	lsrs	r3, r3, #29
 802070c:	075b      	lsls	r3, r3, #29
}
 802070e:	0018      	movs	r0, r3
 8020710:	46bd      	mov	sp, r7
 8020712:	bd80      	pop	{r7, pc}

08020714 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8020714:	b580      	push	{r7, lr}
 8020716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8020718:	23b0      	movs	r3, #176	; 0xb0
 802071a:	05db      	lsls	r3, r3, #23
 802071c:	68db      	ldr	r3, [r3, #12]
 802071e:	2270      	movs	r2, #112	; 0x70
 8020720:	4013      	ands	r3, r2
}
 8020722:	0018      	movs	r0, r3
 8020724:	46bd      	mov	sp, r7
 8020726:	bd80      	pop	{r7, pc}

08020728 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8020728:	b580      	push	{r7, lr}
 802072a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 802072c:	23b0      	movs	r3, #176	; 0xb0
 802072e:	05db      	lsls	r3, r3, #23
 8020730:	68db      	ldr	r3, [r3, #12]
 8020732:	2203      	movs	r2, #3
 8020734:	4013      	ands	r3, r2
}
 8020736:	0018      	movs	r0, r3
 8020738:	46bd      	mov	sp, r7
 802073a:	bd80      	pop	{r7, pc}

0802073c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802073c:	b590      	push	{r4, r7, lr}
 802073e:	b087      	sub	sp, #28
 8020740:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8020742:	2300      	movs	r3, #0
 8020744:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8020746:	2300      	movs	r3, #0
 8020748:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 802074a:	f7ff ffb8 	bl	80206be <LL_RCC_GetSysClkSource>
 802074e:	0003      	movs	r3, r0
 8020750:	60bb      	str	r3, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8020752:	f7ff ffe9 	bl	8020728 <LL_RCC_PLL_GetMainSource>
 8020756:	0003      	movs	r3, r0
 8020758:	607b      	str	r3, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 802075a:	68bb      	ldr	r3, [r7, #8]
 802075c:	2b00      	cmp	r3, #0
 802075e:	d005      	beq.n	802076c <HAL_RCC_GetSysClockFreq+0x30>
 8020760:	68bb      	ldr	r3, [r7, #8]
 8020762:	2b0c      	cmp	r3, #12
 8020764:	d138      	bne.n	80207d8 <HAL_RCC_GetSysClockFreq+0x9c>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8020766:	687b      	ldr	r3, [r7, #4]
 8020768:	2b01      	cmp	r3, #1
 802076a:	d135      	bne.n	80207d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 802076c:	f7ff ff82 	bl	8020674 <LL_RCC_MSI_IsEnabledRangeSelect>
 8020770:	1e03      	subs	r3, r0, #0
 8020772:	d115      	bne.n	80207a0 <HAL_RCC_GetSysClockFreq+0x64>
 8020774:	f7ff ff7e 	bl	8020674 <LL_RCC_MSI_IsEnabledRangeSelect>
 8020778:	0003      	movs	r3, r0
 802077a:	2b01      	cmp	r3, #1
 802077c:	d106      	bne.n	802078c <HAL_RCC_GetSysClockFreq+0x50>
 802077e:	f7ff ff88 	bl	8020692 <LL_RCC_MSI_GetRange>
 8020782:	0003      	movs	r3, r0
 8020784:	0a1b      	lsrs	r3, r3, #8
 8020786:	220f      	movs	r2, #15
 8020788:	4013      	ands	r3, r2
 802078a:	e005      	b.n	8020798 <HAL_RCC_GetSysClockFreq+0x5c>
 802078c:	f7ff ff8b 	bl	80206a6 <LL_RCC_MSI_GetRangeAfterStandby>
 8020790:	0003      	movs	r3, r0
 8020792:	0a1b      	lsrs	r3, r3, #8
 8020794:	220f      	movs	r2, #15
 8020796:	4013      	ands	r3, r2
 8020798:	4a3a      	ldr	r2, [pc, #232]	; (8020884 <HAL_RCC_GetSysClockFreq+0x148>)
 802079a:	009b      	lsls	r3, r3, #2
 802079c:	589b      	ldr	r3, [r3, r2]
 802079e:	e014      	b.n	80207ca <HAL_RCC_GetSysClockFreq+0x8e>
 80207a0:	f7ff ff68 	bl	8020674 <LL_RCC_MSI_IsEnabledRangeSelect>
 80207a4:	0003      	movs	r3, r0
 80207a6:	2b01      	cmp	r3, #1
 80207a8:	d106      	bne.n	80207b8 <HAL_RCC_GetSysClockFreq+0x7c>
 80207aa:	f7ff ff72 	bl	8020692 <LL_RCC_MSI_GetRange>
 80207ae:	0003      	movs	r3, r0
 80207b0:	091b      	lsrs	r3, r3, #4
 80207b2:	220f      	movs	r2, #15
 80207b4:	4013      	ands	r3, r2
 80207b6:	e005      	b.n	80207c4 <HAL_RCC_GetSysClockFreq+0x88>
 80207b8:	f7ff ff75 	bl	80206a6 <LL_RCC_MSI_GetRangeAfterStandby>
 80207bc:	0003      	movs	r3, r0
 80207be:	091b      	lsrs	r3, r3, #4
 80207c0:	220f      	movs	r2, #15
 80207c2:	4013      	ands	r3, r2
 80207c4:	4a2f      	ldr	r2, [pc, #188]	; (8020884 <HAL_RCC_GetSysClockFreq+0x148>)
 80207c6:	009b      	lsls	r3, r3, #2
 80207c8:	589b      	ldr	r3, [r3, r2]
 80207ca:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80207cc:	68bb      	ldr	r3, [r7, #8]
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d115      	bne.n	80207fe <HAL_RCC_GetSysClockFreq+0xc2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80207d2:	693b      	ldr	r3, [r7, #16]
 80207d4:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80207d6:	e012      	b.n	80207fe <HAL_RCC_GetSysClockFreq+0xc2>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80207d8:	68bb      	ldr	r3, [r7, #8]
 80207da:	2b04      	cmp	r3, #4
 80207dc:	d102      	bne.n	80207e4 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80207de:	4b2a      	ldr	r3, [pc, #168]	; (8020888 <HAL_RCC_GetSysClockFreq+0x14c>)
 80207e0:	617b      	str	r3, [r7, #20]
 80207e2:	e00c      	b.n	80207fe <HAL_RCC_GetSysClockFreq+0xc2>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80207e4:	68bb      	ldr	r3, [r7, #8]
 80207e6:	2b08      	cmp	r3, #8
 80207e8:	d109      	bne.n	80207fe <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80207ea:	f7ff ff31 	bl	8020650 <LL_RCC_HSE_IsEnabledDiv2>
 80207ee:	0003      	movs	r3, r0
 80207f0:	2b01      	cmp	r3, #1
 80207f2:	d102      	bne.n	80207fa <HAL_RCC_GetSysClockFreq+0xbe>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80207f4:	4b24      	ldr	r3, [pc, #144]	; (8020888 <HAL_RCC_GetSysClockFreq+0x14c>)
 80207f6:	617b      	str	r3, [r7, #20]
 80207f8:	e001      	b.n	80207fe <HAL_RCC_GetSysClockFreq+0xc2>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80207fa:	4b24      	ldr	r3, [pc, #144]	; (802088c <HAL_RCC_GetSysClockFreq+0x150>)
 80207fc:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80207fe:	f7ff ff5e 	bl	80206be <LL_RCC_GetSysClkSource>
 8020802:	0003      	movs	r3, r0
 8020804:	2b0c      	cmp	r3, #12
 8020806:	d137      	bne.n	8020878 <HAL_RCC_GetSysClockFreq+0x13c>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8020808:	f7ff ff8e 	bl	8020728 <LL_RCC_PLL_GetMainSource>
 802080c:	0003      	movs	r3, r0
 802080e:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	2b02      	cmp	r3, #2
 8020814:	d003      	beq.n	802081e <HAL_RCC_GetSysClockFreq+0xe2>
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	2b03      	cmp	r3, #3
 802081a:	d003      	beq.n	8020824 <HAL_RCC_GetSysClockFreq+0xe8>
 802081c:	e00d      	b.n	802083a <HAL_RCC_GetSysClockFreq+0xfe>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 802081e:	4b1a      	ldr	r3, [pc, #104]	; (8020888 <HAL_RCC_GetSysClockFreq+0x14c>)
 8020820:	60fb      	str	r3, [r7, #12]
        break;
 8020822:	e00d      	b.n	8020840 <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8020824:	f7ff ff14 	bl	8020650 <LL_RCC_HSE_IsEnabledDiv2>
 8020828:	0003      	movs	r3, r0
 802082a:	2b01      	cmp	r3, #1
 802082c:	d102      	bne.n	8020834 <HAL_RCC_GetSysClockFreq+0xf8>
        {
          pllinputfreq = HSE_VALUE / 2U;
 802082e:	4b16      	ldr	r3, [pc, #88]	; (8020888 <HAL_RCC_GetSysClockFreq+0x14c>)
 8020830:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8020832:	e005      	b.n	8020840 <HAL_RCC_GetSysClockFreq+0x104>
          pllinputfreq = HSE_VALUE;
 8020834:	4b15      	ldr	r3, [pc, #84]	; (802088c <HAL_RCC_GetSysClockFreq+0x150>)
 8020836:	60fb      	str	r3, [r7, #12]
        break;
 8020838:	e002      	b.n	8020840 <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 802083a:	693b      	ldr	r3, [r7, #16]
 802083c:	60fb      	str	r3, [r7, #12]
        break;
 802083e:	46c0      	nop			; (mov r8, r8)
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8020840:	f7ff ff53 	bl	80206ea <LL_RCC_PLL_GetN>
 8020844:	0002      	movs	r2, r0
 8020846:	68fb      	ldr	r3, [r7, #12]
 8020848:	4353      	muls	r3, r2
 802084a:	001c      	movs	r4, r3
 802084c:	f7ff ff62 	bl	8020714 <LL_RCC_PLL_GetDivider>
 8020850:	0003      	movs	r3, r0
 8020852:	091b      	lsrs	r3, r3, #4
 8020854:	3301      	adds	r3, #1
 8020856:	0019      	movs	r1, r3
 8020858:	0020      	movs	r0, r4
 802085a:	f7ff fc55 	bl	8020108 <__udivsi3>
 802085e:	0003      	movs	r3, r0
 8020860:	001c      	movs	r4, r3
 8020862:	f7ff ff4d 	bl	8020700 <LL_RCC_PLL_GetR>
 8020866:	0003      	movs	r3, r0
 8020868:	0f5b      	lsrs	r3, r3, #29
 802086a:	3301      	adds	r3, #1
 802086c:	0019      	movs	r1, r3
 802086e:	0020      	movs	r0, r4
 8020870:	f7ff fc4a 	bl	8020108 <__udivsi3>
 8020874:	0003      	movs	r3, r0
 8020876:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8020878:	697b      	ldr	r3, [r7, #20]
}
 802087a:	0018      	movs	r0, r3
 802087c:	46bd      	mov	sp, r7
 802087e:	b007      	add	sp, #28
 8020880:	bd90      	pop	{r4, r7, pc}
 8020882:	46c0      	nop			; (mov r8, r8)
 8020884:	08020960 	.word	0x08020960
 8020888:	00f42400 	.word	0x00f42400
 802088c:	01e84800 	.word	0x01e84800

08020890 <HAL_RCC_GetHCLK2Freq>:
/**
  * @brief  Return the HCLK2 frequency.
  * @retval HCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
 8020890:	b5b0      	push	{r4, r5, r7, lr}
 8020892:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK2 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK2_FREQ(HAL_RCC_GetSysClockFreq(), LL_C2_RCC_GetAHBPrescaler())));
 8020894:	f7ff ff52 	bl	802073c <HAL_RCC_GetSysClockFreq>
 8020898:	0004      	movs	r4, r0
 802089a:	f7ff ff1a 	bl	80206d2 <LL_C2_RCC_GetAHBPrescaler>
 802089e:	0003      	movs	r3, r0
 80208a0:	091b      	lsrs	r3, r3, #4
 80208a2:	220f      	movs	r2, #15
 80208a4:	401a      	ands	r2, r3
 80208a6:	4b05      	ldr	r3, [pc, #20]	; (80208bc <HAL_RCC_GetHCLK2Freq+0x2c>)
 80208a8:	0092      	lsls	r2, r2, #2
 80208aa:	58d3      	ldr	r3, [r2, r3]
 80208ac:	0019      	movs	r1, r3
 80208ae:	0020      	movs	r0, r4
 80208b0:	f7ff fc2a 	bl	8020108 <__udivsi3>
 80208b4:	0003      	movs	r3, r0
}
 80208b6:	0018      	movs	r0, r3
 80208b8:	46bd      	mov	sp, r7
 80208ba:	bdb0      	pop	{r4, r5, r7, pc}
 80208bc:	08020920 	.word	0x08020920

080208c0 <__libc_init_array>:
 80208c0:	b570      	push	{r4, r5, r6, lr}
 80208c2:	2600      	movs	r6, #0
 80208c4:	4c0c      	ldr	r4, [pc, #48]	; (80208f8 <__libc_init_array+0x38>)
 80208c6:	4d0d      	ldr	r5, [pc, #52]	; (80208fc <__libc_init_array+0x3c>)
 80208c8:	1b64      	subs	r4, r4, r5
 80208ca:	10a4      	asrs	r4, r4, #2
 80208cc:	42a6      	cmp	r6, r4
 80208ce:	d109      	bne.n	80208e4 <__libc_init_array+0x24>
 80208d0:	2600      	movs	r6, #0
 80208d2:	f000 f819 	bl	8020908 <_init>
 80208d6:	4c0a      	ldr	r4, [pc, #40]	; (8020900 <__libc_init_array+0x40>)
 80208d8:	4d0a      	ldr	r5, [pc, #40]	; (8020904 <__libc_init_array+0x44>)
 80208da:	1b64      	subs	r4, r4, r5
 80208dc:	10a4      	asrs	r4, r4, #2
 80208de:	42a6      	cmp	r6, r4
 80208e0:	d105      	bne.n	80208ee <__libc_init_array+0x2e>
 80208e2:	bd70      	pop	{r4, r5, r6, pc}
 80208e4:	00b3      	lsls	r3, r6, #2
 80208e6:	58eb      	ldr	r3, [r5, r3]
 80208e8:	4798      	blx	r3
 80208ea:	3601      	adds	r6, #1
 80208ec:	e7ee      	b.n	80208cc <__libc_init_array+0xc>
 80208ee:	00b3      	lsls	r3, r6, #2
 80208f0:	58eb      	ldr	r3, [r5, r3]
 80208f2:	4798      	blx	r3
 80208f4:	3601      	adds	r6, #1
 80208f6:	e7f2      	b.n	80208de <__libc_init_array+0x1e>
 80208f8:	080209a0 	.word	0x080209a0
 80208fc:	080209a0 	.word	0x080209a0
 8020900:	080209a4 	.word	0x080209a4
 8020904:	080209a0 	.word	0x080209a0

08020908 <_init>:
 8020908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802090a:	46c0      	nop			; (mov r8, r8)
 802090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802090e:	bc08      	pop	{r3}
 8020910:	469e      	mov	lr, r3
 8020912:	4770      	bx	lr

08020914 <_fini>:
 8020914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020916:	46c0      	nop			; (mov r8, r8)
 8020918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802091a:	bc08      	pop	{r3}
 802091c:	469e      	mov	lr, r3
 802091e:	4770      	bx	lr
